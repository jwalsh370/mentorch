/*!
 * chain.js - basic utilities for bpanel chain operations
 * Copyright (c) 2018, Bcoin Devs (MIT License).
 * https://github.com/bcoin-org/bpanel-utils
 */

'use strict';

exports.__esModule = true;
exports.getBlocksInRange = exports.getBlock = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

// utility to get a range of blocks
var getBlocksInRange = exports.getBlocksInRange = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(start, end) {
    var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

    var blocks, height, block, _step, _block;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // get all blocks from blockHeight `start` up to `start`+ n
            // create an array of the blocks
            blocks = [];
            height = start;

            if (!(start < end)) {
              _context.next = 21;
              break;
            }

            // counting up
            (0, _assert2.default)(step > 0, 'Step needs to be greater than zero to count up');

          case 4:
            if (!(height < end)) {
              _context.next = 19;
              break;
            }

            _context.prev = 5;
            _context.next = 8;
            return getBlock(height);

          case 8:
            block = _context.sent;

            blocks.push(block);
            height += step;
            _context.next = 17;
            break;

          case 13:
            _context.prev = 13;
            _context.t0 = _context['catch'](5);

            // eslint-disable-next-line no-console
            console.log('Error retrieving block: ', _context.t0);
            return _context.abrupt('return', blocks);

          case 17:
            _context.next = 4;
            break;

          case 19:
            _context.next = 39;
            break;

          case 21:
            if (!(start > end)) {
              _context.next = 39;
              break;
            }

            // counting down
            _step = step;

            if (step >= 1) {
              _step = -1;
            } else {
              (0, _assert2.default)(step < 1, 'Step must be negative to countdown');
            }

          case 24:
            if (!(height > end)) {
              _context.next = 39;
              break;
            }

            _context.prev = 25;
            _context.next = 28;
            return getBlock(height);

          case 28:
            _block = _context.sent;

            blocks.push(_block);
            height += _step;
            _context.next = 37;
            break;

          case 33:
            _context.prev = 33;
            _context.t1 = _context['catch'](25);

            // eslint-disable-next-line no-console
            console.log('Error retrieving block: ', _context.t1);
            height += _step;
            // return blocks;

          case 37:
            _context.next = 24;
            break;

          case 39:
            return _context.abrupt('return', blocks);

          case 40:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[5, 13], [25, 33]]);
  }));

  return function getBlocksInRange(_x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

exports.calcProgress = calcProgress;

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _clients = require('./clients');

var _helpers = require('./helpers');

var _helpers2 = _interopRequireDefault(_helpers);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var client = (0, _clients.bpanelClient)();
// Simple API call to retrieve a block at specified height or hash
// returns a promise
var getBlock = exports.getBlock = function getBlock(hashOrHeight) {
  try {
    return client.getBlock(hashOrHeight);
  } catch (e) {
    // eslint-disable-next-line no-console
    console.error('There was a problem retrieving block: ', e);
  }
};

function calcProgress(start, tip) {
  var current = tip - start;
  var end = _helpers2.default.now() - start - 40 * 60;
  return Math.min(1, current / end);
}exports.default = {
  calcProgress: calcProgress,
  getBlock: getBlock,
  getBlocksInRange: getBlocksInRange
};